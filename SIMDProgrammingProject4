#include <xmmintrin.h>
#include <omp.h>
#include <stdio.h>
#include <math.h>
#include <iostream>

#define SSE_WIDTH		4

#define NumTrial		10

#define ArraySize		1000
using namespace std;
float
SimdMulSum(float* a, float* b, int len)
{
	float sum[4] = { 0., 0., 0., 0. };
	int limit = (len / SSE_WIDTH) * SSE_WIDTH;
	register float* pa = a;
	register float* pb = b;

	__m128 ss = _mm_loadu_ps(&sum[0]);

	double time0 = omp_get_wtime();

	for (int i = 0; i < limit; i += SSE_WIDTH)
	{
		ss = _mm_add_ps(ss, _mm_mul_ps(_mm_loadu_ps(pa), _mm_loadu_ps(pb)));
		pa += SSE_WIDTH;
		pb += SSE_WIDTH;
	}
	_mm_storeu_ps(&sum[0], ss);

	double time1 = omp_get_wtime();

	double time2 = omp_get_wtime();
	for (int i = limit; i < len; i++)
	{
		sum[0] += a[i] * b[i];
	}
	double time3 = omp_get_wtime();

	double elapsedTimeSSE = time1 - time0;
	double elapsedTimeNonSSE = time3 - time2;
	return sum[0] + sum[1] + sum[2] + sum[3];
}
